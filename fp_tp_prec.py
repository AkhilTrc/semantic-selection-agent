import os
import ast
from testing import count_unique_elements_in_file

def calc_metrics(filename):
    # Example: The true set of Little Alchemy 2 elements

    with open('true_elements.txt', 'r', encoding='utf-8') as file:
        content = file.read()

    true_elements = ast.literal_eval(content)

    """
    true_elements = {
        "air", "water", "fire", "earth", "cloud", "steam", "lava", "plant", "tree", "mud",
        "swamp", "energy",...
    }
    """

    # Example: Elements generated by your candidate model
    candidate_elements = count_unique_elements_in_file(filename) 

    # Convert to sets for efficient operations
    candidate_set = set(candidate_elements)

    # Calculate True Positives (TP): Correctly generated official elements
    tp = len(candidate_set & set(true_elements))  # intersection

    # Calculate False Positives (FP): Generated elements that are NOT official
    fp = len(candidate_set - set(true_elements))  # difference

    # (Optional) Calculate False Negatives (FN): Official elements NOT generated
    fn = len(set(true_elements) - candidate_set)

    # Calculate Precision
    precision = tp / (tp + fp) if (tp + fp) else 0

    # (Optional) Calculate Recall and F1 Score
    recall = tp / (tp + fn) if (tp + fn) else 0
    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) else 0

    # Print the results
    print(f"True Positives (TP): {tp}")
    print(f"False Positives (FP): {fp}")
    print(f"Precision: {precision:.2f}")
    print(f"Recall: {recall:.2f}")
    print(f"F1 Score: {f1:.2f}")
    return tp, fp, precision


def get_json_batches(folder_path, batch_size=30):
    # List all .json files in the folder
    json_files = [f for f in os.listdir(folder_path) if f.endswith('.json')]

    # Yield files in batches
    for i in range(0, len(json_files), batch_size):
        yield json_files[i:i+batch_size]


if __name__ == "__main__":

    folder_path = "inventory_jsons_v5"
    json_files = [f for f in os.listdir(folder_path) if f.endswith('.json')]
    
    batch_size = 30
    total_tp = 0
    total_fp = 0
    total_precision = 0.0
    tp_batch = 0
    fp_batch = 0
    precision_batch = 0.0

    for batch_num, batch in enumerate(get_json_batches(folder_path), 1):
        print(f"Batch {batch_num}:")
        for filename in batch:
            print(f"\n  {filename}: \n")
            tp, fp, precision = calc_metrics(filename)
            total_tp = total_tp + tp
            total_fp = total_fp + fp
            total_precision = total_precision + precision
        tp_batch = tp_batch + total_tp
        fp_batch = fp_batch + total_fp
        precision_batch = precision_batch + total_precision
        print("-" * 20)
    print(f"\nAverage tp: {tp_batch/10}\n")
    print(f"\nAverage fp: {fp_batch/10}\n")
    print(f"\nAverage precision: {precision_batch/1000}\n")

    print(f"Number of json files: {len(json_files)}")
    
        
